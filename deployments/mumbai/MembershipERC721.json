{
  "address": "0xc98c48261002CFEBDa0f3ACF8198F3e9E1f24dC7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "EmptyTokenNameOrSymbol",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "MintToAddressWithToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "NonTransferable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RenounceOwnership",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ExpiryTimestampUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getExpiryTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTimestamp",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "transferability",
          "type": "bool"
        }
      ],
      "name": "setTransferability",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTrustedFowarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "updateExpiryTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "94ddc59c644f9020539ddc141aac5ff9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"EmptyTokenNameOrSymbol\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"MintToAddressWithToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NonTransferable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RenounceOwnership\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExpiryTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getExpiryTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"transferability\",\"type\":\"bool\"}],\"name\":\"setTransferability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrustedFowarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedTimestamp\",\"type\":\"uint256\"}],\"name\":\"updateExpiryTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EmptyTokenNameOrSymbol(string,string)\":[{\"params\":{\"name\":\"user-provided token name\",\"symbol\":\"user-provided symbol\"}}],\"MintToAddressWithToken(address,address)\":[{\"params\":{\"from\":\"minter address\",\"to\":\"recipient address with balance > 0\"}}],\"NonTransferable(address,address)\":[{\"params\":{\"from\":\"sender address\",\"to\":\"recipient address\"}}],\"RenounceOwnership(address)\":[{\"params\":{\"owner\":\"owner address\"}}]},\"events\":{\"ExpiryTimestampUpdated(uint256,uint256)\":{\"params\":{\"expiryTimestamp\":\"new expiry timestamp for the token\",\"tokenId\":\"token id being updated\"}},\"TokenMinted(uint256,address,uint256)\":{\"params\":{\"expiryTimestamp\":\"expiry timestamp of minted token\",\"to\":\"token recipient\",\"tokenId\":\"tokenId of new token\"}},\"TrustedForwarderUpdated(address)\":{\"params\":{\"trustedForwarderAddress\":\"new trusted forwarder address\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"EmptyTokenNameOrSymbol(string,string)\":[{\"notice\":\"Empty token name or symbol when initializing contract\"}],\"MintToAddressWithToken(address,address)\":[{\"notice\":\"Attempt to mint token to address with balance > 0\"}],\"NonTransferable(address,address)\":[{\"notice\":\"Attempt to transfer non-transferable token\"}],\"RenounceOwnership(address)\":[{\"notice\":\"Renounce ownership error\"}]},\"events\":{\"ExpiryTimestampUpdated(uint256,uint256)\":{\"notice\":\"Expiry timestamp update for a particular token\"},\"TokenMinted(uint256,address,uint256)\":{\"notice\":\"New token minted\"},\"TrustedForwarderUpdated(address)\":{\"notice\":\"Trusted forwarder addres updated for a contract instance\"}},\"kind\":\"user\",\"methods\":{\"getExpiryTimestamp(uint256)\":{\"notice\":\"Gets the expiry timestamp for a given address\"},\"isTransferable()\":{\"notice\":\"Get transferability of token\"},\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"},\"renounceOwnership()\":{\"notice\":\"Renounce ownership of contract instance. Always reverts.\"},\"safeMint(address,uint256)\":{\"notice\":\"Mints an ERC-721 token to the address `to` with a subscription expiry timestsamp of `expiryTimestamp`. This function can only be called by the contract owner.\"},\"setTransferability(bool)\":{\"notice\":\"Make token transferable / non-transferable\"},\"setTrustedForwarder(address)\":{\"notice\":\"Sets the trusted forwarder for meta-transactions (EIP-2771) This function can only be called by the contract owner.\"},\"setUp(string,string,address)\":{\"notice\":\"Initializer for contract. Sets token name, symbol and trusted forwarder (ERC-2771)\"},\"tokenURI(uint256)\":{\"notice\":\"Generates the token URI for a particular token ID\"},\"updateExpiryTimestamp(uint256,uint256)\":{\"notice\":\"Updates the expiry timestamp for a given address. This function can only be called by the contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MembershipERC721.sol\":\"MembershipERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721BurnableUpgradeable is Initializable, ContextUpgradeable, ERC721Upgradeable {\\n    function __ERC721Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa7dbff7171ac06a023a5ca52c2138ac711037b2146b9197a52e5de4f9183e04d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64Upgradeable {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xe5e4e0d8e42c3d922808e127da779fede3bc382c1fc19665c5663e118027f7f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/MembershipERC721.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/Base64Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\n\\ncontract MembershipERC721 is\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721BurnableUpgradeable,\\n    OwnableUpgradeable,\\n    BaseRelayRecipient\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    /* Version recipient for OpenGSN */\\n    string public constant override versionRecipient = \\\"2.2.5\\\";\\n\\n    // Mapping from tokenId to membership expiry timestamp\\n    mapping(uint256 => uint256) private tokenIdExpiryTimestamps;\\n\\n    // Switch for token transferability\\n    bool transferable;\\n\\n    /* Events */\\n    /// Expiry timestamp update for a particular token\\n    /// @param tokenId token id being updated\\n    /// @param expiryTimestamp new expiry timestamp for the token\\n    event ExpiryTimestampUpdated(uint256 tokenId, uint256 expiryTimestamp);\\n    /// Trusted forwarder addres updated for a contract instance\\n    /// @param trustedForwarderAddress new trusted forwarder address\\n    event TrustedForwarderUpdated(address trustedForwarderAddress);\\n    /// New token minted\\n    /// @param tokenId tokenId of new token\\n    /// @param to token recipient\\n    /// @param expiryTimestamp expiry timestamp of minted token\\n    event TokenMinted(uint256 tokenId, address to, uint256 expiryTimestamp);\\n\\n    /* Errors */\\n    /// Empty token name or symbol when initializing contract\\n    /// @param name user-provided token name\\n    /// @param symbol user-provided symbol\\n    error EmptyTokenNameOrSymbol(string name, string symbol);\\n    /// Attempt to transfer non-transferable token\\n    /// @param from sender address\\n    /// @param to recipient address\\n    error NonTransferable(address from, address to);\\n    /// Attempt to mint token to address with balance > 0\\n    /// @param from minter address\\n    /// @param to recipient address with balance > 0\\n    error MintToAddressWithToken(address from, address to);\\n    /// Renounce ownership error\\n    /// @param owner owner address\\n    error RenounceOwnership(address owner);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initializer for contract. Sets token name, symbol and trusted forwarder (ERC-2771)\\n    function setUp(\\n        string memory _name,\\n        string memory _symbol,\\n        address _trustedForwarder\\n    ) public initializer {\\n        if (bytes(_name).length == 0 || bytes(_symbol).length == 0) {\\n            revert EmptyTokenNameOrSymbol(_name, _symbol);\\n        }\\n        __ERC721_init(_name, _symbol);\\n        __ERC721Burnable_init();\\n        __Ownable_init();\\n        _setTrustedForwarder(_trustedForwarder);\\n        transferable = false;\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://clubhouse.com/nft/\\\";\\n    }\\n\\n    /// @notice Mints an ERC-721 token to the address `to` with a subscription\\n    /// expiry timestsamp of `expiryTimestamp`. This function can only be called\\n    /// by the contract owner.\\n    function safeMint(address to, uint256 expiryTimestamp) public onlyOwner {\\n        if (balanceOf(to) != 0) {\\n            revert MintToAddressWithToken(_msgSender(), to);\\n        }\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _safeMint(to, tokenId);\\n        tokenIdExpiryTimestamps[tokenId] = expiryTimestamp;\\n        _tokenIdCounter.increment();\\n        emit TokenMinted(tokenId, to, expiryTimestamp);\\n    }\\n\\n    /// @notice Updates the expiry timestamp for a given address. This function\\n    /// can only be called by the contract owner.\\n    function updateExpiryTimestamp(uint256 tokenId, uint256 updatedTimestamp)\\n        external\\n        onlyOwner\\n    {\\n        tokenIdExpiryTimestamps[tokenId] = updatedTimestamp;\\n        emit ExpiryTimestampUpdated(tokenId, updatedTimestamp);\\n    }\\n\\n    /// @notice Gets the expiry timestamp for a given address\\n    function getExpiryTimestamp(uint256 tokenId) public view returns (uint256) {\\n        return tokenIdExpiryTimestamps[tokenId];\\n    }\\n\\n    /// @notice Sets the trusted forwarder for meta-transactions (EIP-2771)\\n    /// This function can only be called by the contract owner.\\n    function setTrustedForwarder(address _newTrustedFowarder) public onlyOwner {\\n        _setTrustedForwarder(_newTrustedFowarder);\\n        emit TrustedForwarderUpdated(_newTrustedFowarder);\\n    }\\n\\n    /// @notice Generates the token URI for a particular token ID\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(_tokenId);\\n\\n        string memory _nftName = string(abi.encodePacked(name()));\\n\\n        bytes memory _image = abi.encodePacked(\\n            _baseURI(),\\n            StringsUpgradeable.toHexString(uint256(uint160(address(this))), 20),\\n            \\\"_\\\",\\n            StringsUpgradeable.toString(_tokenId),\\n            \\\".png\\\"\\n        );\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64Upgradeable.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                _nftName,\\n                                '\\\",\\\"image\\\":\\\"',\\n                                _image,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @notice Renounce ownership of contract instance. Always reverts.\\n    function renounceOwnership()\\n        public\\n        view\\n        override(OwnableUpgradeable)\\n        onlyOwner\\n    {\\n        revert RenounceOwnership(owner());\\n    }\\n\\n    /// @notice Pre-transfer hook that locks token transfers for this contract\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721Upgradeable) {\\n        if (!transferable && from != address(0) && to != address(0)) {\\n            revert NonTransferable(from, to);\\n        }\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Make token transferable / non-transferable\\n    function setTransferability(bool transferability) public onlyOwner {\\n        transferable = transferability;\\n    }\\n\\n    /// @notice Get transferability of token\\n    function isTransferable() public view returns (bool) {\\n        return transferable;\\n    }\\n\\n    /// @notice Provides access to message sender of a meta transaction (EIP-2771)\\n    function _msgSender()\\n        internal\\n        view\\n        override(ContextUpgradeable, BaseRelayRecipient)\\n        returns (address sender)\\n    {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    /// @notice Provides access to message data of a meta transaction (EIP-2771)\\n    function _msgData()\\n        internal\\n        view\\n        override(ContextUpgradeable, BaseRelayRecipient)\\n        returns (bytes calldata)\\n    {\\n        return BaseRelayRecipient._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x249712063120c9d06b0c294ae7b60bef09d751b590d56f3567296c9f2852cbae\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d3565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000176565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff161015620000ed5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e49190620001b6565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015e602783620000ef565b91506200016b8262000100565b604082019050919050565b6000602082019050818103600083015262000191816200014f565b9050919050565b600060ff82169050919050565b620001b08162000198565b82525050565b6000602082019050620001cd6000830184620001a5565b92915050565b6141c180620001e36000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80635948ab63116100f9578063a144819411610097578063c87b56dd11610071578063c87b56dd146104a4578063da742228146104d4578063e985e9c5146104f0578063f2fde38b14610520576101a9565b8063a144819414610450578063a22cb4651461046c578063b88d4fde14610488576101a9565b8063715018a6116100d3578063715018a6146103ec5780637da0a877146103f65780638da5cb5b1461041457806395d89b4114610432576101a9565b80635948ab63146103705780636352211e1461038c57806370a08231146103bc576101a9565b806323b872dd1161016657806342842e0e1161014057806342842e0e146102ea57806342966c6814610306578063486ff0cd14610322578063572b6c0514610340576101a9565b806323b872dd146102825780633a98cc971461029e57806342692c0f146102ba576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c5780631c2d0e71146102485780632121dc7514610264575b600080fd5b6101c860048036038101906101c39190612835565b61053c565b6040516101d5919061287d565b60405180910390f35b6101e661061e565b6040516101f39190612928565b60405180910390f35b61021660048036038101906102119190612980565b6106b0565b60405161022391906129ee565b60405180910390f35b61024660048036038101906102419190612a35565b6106f6565b005b610262600480360381019061025d9190612baa565b61080d565b005b61026c6109d9565b604051610279919061287d565b60405180910390f35b61029c60048036038101906102979190612c35565b6109f0565b005b6102b860048036038101906102b39190612c88565b610a50565b005b6102d460048036038101906102cf9190612980565b610aad565b6040516102e19190612cd7565b60405180910390f35b61030460048036038101906102ff9190612c35565b610aca565b005b610320600480360381019061031b9190612980565b610aea565b005b61032a610b46565b6040516103379190612928565b60405180910390f35b61035a60048036038101906103559190612cf2565b610b7f565b604051610367919061287d565b60405180910390f35b61038a60048036038101906103859190612d4b565b610bd9565b005b6103a660048036038101906103a19190612980565b610bfe565b6040516103b391906129ee565b60405180910390f35b6103d660048036038101906103d19190612cf2565b610caf565b6040516103e39190612cd7565b60405180910390f35b6103f4610d66565b005b6103fe610db2565b60405161040b91906129ee565b60405180910390f35b61041c610ddc565b60405161042991906129ee565b60405180910390f35b61043a610e06565b6040516104479190612928565b60405180910390f35b61046a60048036038101906104659190612a35565b610e98565b005b61048660048036038101906104819190612d78565b610f70565b005b6104a2600480360381019061049d9190612e59565b610f86565b005b6104be60048036038101906104b99190612980565b610fe8565b6040516104cb9190612928565b60405180910390f35b6104ee60048036038101906104e99190612cf2565b6110c7565b005b61050a60048036038101906105059190612edc565b611112565b604051610517919061287d565b60405180910390f35b61053a60048036038101906105359190612cf2565b6111a6565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061060757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610617575061061682611229565b5b9050919050565b60606065805461062d90612f4b565b80601f016020809104026020016040519081016040528092919081815260200182805461065990612f4b565b80156106a65780601f1061067b576101008083540402835291602001916106a6565b820191906000526020600020905b81548152906001019060200180831161068957829003601f168201915b5050505050905090565b60006106bb82611293565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070182610bfe565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890612fee565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107906112de565b73ffffffffffffffffffffffffffffffffffffffff1614806107bf57506107be816107b96112de565b611112565b5b6107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590613080565b60405180910390fd5b61080883836112ed565b505050565b60008060019054906101000a900460ff1615905080801561083e5750600160008054906101000a900460ff1660ff16105b8061086b575061084d306113a6565b15801561086a5750600160008054906101000a900460ff1660ff16145b5b6108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190613112565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156108e7576001600060016101000a81548160ff0219169083151502179055505b6000845114806108f8575060008351145b1561093c5783836040517ff61e67e3000000000000000000000000000000000000000000000000000000008152600401610933929190613132565b60405180910390fd5b61094684846113c9565b61094e611426565b610956611477565b61095f826114d0565b600060fe60006101000a81548160ff02191690831515021790555080156109d35760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109ca91906131bb565b60405180910390a15b50505050565b600060fe60009054906101000a900460ff16905090565b610a016109fb6112de565b82611514565b610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3790613248565b60405180910390fd5b610a4b8383836115a9565b505050565b610a5861180f565b8060fd6000848152602001908152602001600020819055507f12daf683bab6ba1acaabadac5b80bbae1133812320be73dc4f62f0c0c8b1a0a28282604051610aa1929190613268565b60405180910390a15050565b600060fd6000838152602001908152602001600020549050919050565b610ae583838360405180602001604052806000815250610f86565b505050565b610afb610af56112de565b82611514565b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613248565b60405180910390fd5b610b438161188d565b50565b6040518060400160405280600581526020017f322e322e3500000000000000000000000000000000000000000000000000000081525081565b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610be161180f565b8060fe60006101000a81548160ff02191690831515021790555050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d906132dd565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d169061336f565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d6e61180f565b610d76610ddc565b6040517f78051f4d000000000000000000000000000000000000000000000000000000008152600401610da991906129ee565b60405180910390fd5b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060668054610e1590612f4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4190612f4b565b8015610e8e5780601f10610e6357610100808354040283529160200191610e8e565b820191906000526020600020905b815481529060010190602001808311610e7157829003601f168201915b5050505050905090565b610ea061180f565b6000610eab83610caf565b14610ef657610eb86112de565b826040517f11c434ba000000000000000000000000000000000000000000000000000000008152600401610eed92919061338f565b60405180910390fd5b6000610f0260fc6119aa565b9050610f0e83826119b8565b8160fd600083815260200190815260200160002081905550610f3060fc6119d6565b7f2d03118aa776f7008445f6ca8490a6782ede2db364d741513555ba656ab1879f818484604051610f63939291906133b8565b60405180910390a1505050565b610f82610f7b6112de565b83836119ec565b5050565b610f97610f916112de565b83611514565b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90613248565b60405180910390fd5b610fe284848484611b58565b50505050565b6060610ff382611293565b6000610ffd61061e565b60405160200161100d919061342b565b60405160208183030381529060405290506000611028611bb4565b6110493073ffffffffffffffffffffffffffffffffffffffff166014611bf1565b61105286611e2d565b604051602001611064939291906134da565b604051602081830303815290604052905061109f828260405160200161108b92919061364c565b604051602081830303815290604052611f8d565b6040516020016110af91906136dd565b60405160208183030381529060405292505050919050565b6110cf61180f565b6110d8816114d0565b7fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd118160405161110791906129ee565b60405180910390a150565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6111ae61180f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490613771565b60405180910390fd5b611226816120f0565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61129c816121b6565b6112db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d2906132dd565b60405180910390fd5b50565b60006112e8612222565b905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661136083610bfe565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f90613803565b60405180910390fd5b6114228282612259565b5050565b600060019054906101000a900460ff16611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146c90613803565b60405180910390fd5b565b600060019054906101000a900460ff166114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd90613803565b60405180910390fd5b6114ce6122cc565b565b8060fb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061152083610bfe565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061156257506115618185611112565b5b806115a057508373ffffffffffffffffffffffffffffffffffffffff16611588846106b0565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166115c982610bfe565b73ffffffffffffffffffffffffffffffffffffffff161461161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690613895565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590613927565b60405180910390fd5b61169983838361232d565b6116a46000826112ed565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116f49190613976565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461174b91906139aa565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461180a838383612404565b505050565b6118176112de565b73ffffffffffffffffffffffffffffffffffffffff16611835610ddc565b73ffffffffffffffffffffffffffffffffffffffff161461188b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188290613a2a565b60405180910390fd5b565b600061189882610bfe565b90506118a68160008461232d565b6118b16000836112ed565b6001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119019190613976565b925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46119a681600084612404565b5050565b600081600001549050919050565b6119d2828260405180602001604052806000815250612409565b5050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5190613a96565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b4b919061287d565b60405180910390a3505050565b611b638484846115a9565b611b6f84848484612464565b611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba590613b28565b60405180910390fd5b50505050565b60606040518060400160405280601a81526020017f68747470733a2f2f636c7562686f7573652e636f6d2f6e66742f000000000000815250905090565b606060006002836002611c049190613b48565b611c0e91906139aa565b67ffffffffffffffff811115611c2757611c26612a7f565b5b6040519080825280601f01601f191660200182016040528015611c595781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c9157611c90613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611cf557611cf4613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611d359190613b48565b611d3f91906139aa565b90505b6001811115611ddf577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611d8157611d80613b8a565b5b1a60f81b828281518110611d9857611d97613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611dd890613bb9565b9050611d42565b5060008414611e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1a90613c2e565b60405180910390fd5b8091505092915050565b606060008203611e74576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f88565b600082905060005b60008214611ea6578080611e8f90613c4e565b915050600a82611e9f9190613cc5565b9150611e7c565b60008167ffffffffffffffff811115611ec257611ec1612a7f565b5b6040519080825280601f01601f191660200182016040528015611ef45781602001600182028036833780820191505090505b5090505b60008514611f8157600182611f0d9190613976565b9150600a85611f1c9190613cf6565b6030611f2891906139aa565b60f81b818381518110611f3e57611f3d613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f7a9190613cc5565b9450611ef8565b8093505050505b919050565b60606000825103611faf576040518060200160405280600081525090506120eb565b600060405180606001604052806040815260200161414c6040913990506000600360028551611fde91906139aa565b611fe89190613cc5565b6004611ff49190613b48565b67ffffffffffffffff81111561200d5761200c612a7f565b5b6040519080825280601f01601f19166020018201604052801561203f5781602001600182028036833780820191505090505b509050600182016020820185865187015b808210156120ab576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050612050565b50506003865106600181146120c757600281146120da576120e2565b603d6001830353603d60028303536120e2565b603d60018303535b50505080925050505b919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000601460003690501015801561223e575061223d33610b7f565b5b1561225257601436033560601c9050612256565b3390505b90565b600060019054906101000a900460ff166122a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229f90613803565b60405180910390fd5b81606590816122b79190613ec9565b5080606690816122c79190613ec9565b505050565b600060019054906101000a900460ff1661231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231290613803565b60405180910390fd5b61232b6123266112de565b6120f0565b565b60fe60009054906101000a900460ff161580156123775750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156123b05750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156123f45782826040517f57c167f80000000000000000000000000000000000000000000000000000000081526004016123eb92919061338f565b60405180910390fd5b6123ff8383836125eb565b505050565b505050565b61241383836125f0565b6124206000848484612464565b61245f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245690613b28565b60405180910390fd5b505050565b60006124858473ffffffffffffffffffffffffffffffffffffffff166113a6565b156125de578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026124ae6112de565b8786866040518563ffffffff1660e01b81526004016124d09493929190613fe5565b6020604051808303816000875af192505050801561250c57506040513d601f19601f820116820180604052508101906125099190614046565b60015b61258e573d806000811461253c576040519150601f19603f3d011682016040523d82523d6000602084013e612541565b606091505b506000815103612586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257d90613b28565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506125e3565b600190505b949350505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361265f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612656906140bf565b60405180910390fd5b612668816121b6565b156126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f9061412b565b60405180910390fd5b6126b46000838361232d565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461270491906139aa565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127c560008383612404565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612812816127dd565b811461281d57600080fd5b50565b60008135905061282f81612809565b92915050565b60006020828403121561284b5761284a6127d3565b5b600061285984828501612820565b91505092915050565b60008115159050919050565b61287781612862565b82525050565b6000602082019050612892600083018461286e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128d25780820151818401526020810190506128b7565b60008484015250505050565b6000601f19601f8301169050919050565b60006128fa82612898565b61290481856128a3565b93506129148185602086016128b4565b61291d816128de565b840191505092915050565b6000602082019050818103600083015261294281846128ef565b905092915050565b6000819050919050565b61295d8161294a565b811461296857600080fd5b50565b60008135905061297a81612954565b92915050565b600060208284031215612996576129956127d3565b5b60006129a48482850161296b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129d8826129ad565b9050919050565b6129e8816129cd565b82525050565b6000602082019050612a0360008301846129df565b92915050565b612a12816129cd565b8114612a1d57600080fd5b50565b600081359050612a2f81612a09565b92915050565b60008060408385031215612a4c57612a4b6127d3565b5b6000612a5a85828601612a20565b9250506020612a6b8582860161296b565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ab7826128de565b810181811067ffffffffffffffff82111715612ad657612ad5612a7f565b5b80604052505050565b6000612ae96127c9565b9050612af58282612aae565b919050565b600067ffffffffffffffff821115612b1557612b14612a7f565b5b612b1e826128de565b9050602081019050919050565b82818337600083830152505050565b6000612b4d612b4884612afa565b612adf565b905082815260208101848484011115612b6957612b68612a7a565b5b612b74848285612b2b565b509392505050565b600082601f830112612b9157612b90612a75565b5b8135612ba1848260208601612b3a565b91505092915050565b600080600060608486031215612bc357612bc26127d3565b5b600084013567ffffffffffffffff811115612be157612be06127d8565b5b612bed86828701612b7c565b935050602084013567ffffffffffffffff811115612c0e57612c0d6127d8565b5b612c1a86828701612b7c565b9250506040612c2b86828701612a20565b9150509250925092565b600080600060608486031215612c4e57612c4d6127d3565b5b6000612c5c86828701612a20565b9350506020612c6d86828701612a20565b9250506040612c7e8682870161296b565b9150509250925092565b60008060408385031215612c9f57612c9e6127d3565b5b6000612cad8582860161296b565b9250506020612cbe8582860161296b565b9150509250929050565b612cd18161294a565b82525050565b6000602082019050612cec6000830184612cc8565b92915050565b600060208284031215612d0857612d076127d3565b5b6000612d1684828501612a20565b91505092915050565b612d2881612862565b8114612d3357600080fd5b50565b600081359050612d4581612d1f565b92915050565b600060208284031215612d6157612d606127d3565b5b6000612d6f84828501612d36565b91505092915050565b60008060408385031215612d8f57612d8e6127d3565b5b6000612d9d85828601612a20565b9250506020612dae85828601612d36565b9150509250929050565b600067ffffffffffffffff821115612dd357612dd2612a7f565b5b612ddc826128de565b9050602081019050919050565b6000612dfc612df784612db8565b612adf565b905082815260208101848484011115612e1857612e17612a7a565b5b612e23848285612b2b565b509392505050565b600082601f830112612e4057612e3f612a75565b5b8135612e50848260208601612de9565b91505092915050565b60008060008060808587031215612e7357612e726127d3565b5b6000612e8187828801612a20565b9450506020612e9287828801612a20565b9350506040612ea38782880161296b565b925050606085013567ffffffffffffffff811115612ec457612ec36127d8565b5b612ed087828801612e2b565b91505092959194509250565b60008060408385031215612ef357612ef26127d3565b5b6000612f0185828601612a20565b9250506020612f1285828601612a20565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f6357607f821691505b602082108103612f7657612f75612f1c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fd86021836128a3565b9150612fe382612f7c565b604082019050919050565b6000602082019050818103600083015261300781612fcb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061306a603e836128a3565b91506130758261300e565b604082019050919050565b600060208201905081810360008301526130998161305d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006130fc602e836128a3565b9150613107826130a0565b604082019050919050565b6000602082019050818103600083015261312b816130ef565b9050919050565b6000604082019050818103600083015261314c81856128ef565b9050818103602083015261316081846128ef565b90509392505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006131a56131a061319b84613169565b613180565b613173565b9050919050565b6131b58161318a565b82525050565b60006020820190506131d060008301846131ac565b92915050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613232602e836128a3565b915061323d826131d6565b604082019050919050565b6000602082019050818103600083015261326181613225565b9050919050565b600060408201905061327d6000830185612cc8565b61328a6020830184612cc8565b9392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006132c76018836128a3565b91506132d282613291565b602082019050919050565b600060208201905081810360008301526132f6816132ba565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006133596029836128a3565b9150613364826132fd565b604082019050919050565b600060208201905081810360008301526133888161334c565b9050919050565b60006040820190506133a460008301856129df565b6133b160208301846129df565b9392505050565b60006060820190506133cd6000830186612cc8565b6133da60208301856129df565b6133e76040830184612cc8565b949350505050565b600081905092915050565b600061340582612898565b61340f81856133ef565b935061341f8185602086016128b4565b80840191505092915050565b600061343782846133fa565b915081905092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000600082015250565b60006134786001836133ef565b915061348382613442565b600182019050919050565b7f2e706e6700000000000000000000000000000000000000000000000000000000600082015250565b60006134c46004836133ef565b91506134cf8261348e565b600482019050919050565b60006134e682866133fa565b91506134f282856133fa565b91506134fd8261346b565b915061350982846133fa565b9150613514826134b7565b9150819050949350505050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b60006135576009836133ef565b915061356282613521565b600982019050919050565b7f222c22696d616765223a22000000000000000000000000000000000000000000600082015250565b60006135a3600b836133ef565b91506135ae8261356d565b600b82019050919050565b600081519050919050565b600081905092915050565b60006135da826135b9565b6135e481856135c4565b93506135f48185602086016128b4565b80840191505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006136366002836133ef565b915061364182613600565b600282019050919050565b60006136578261354a565b915061366382856133fa565b915061366e82613596565b915061367a82846135cf565b915061368582613629565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006136c7601d836133ef565b91506136d282613691565b601d82019050919050565b60006136e8826136ba565b91506136f482846133fa565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061375b6026836128a3565b9150613766826136ff565b604082019050919050565b6000602082019050818103600083015261378a8161374e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006137ed602b836128a3565b91506137f882613791565b604082019050919050565b6000602082019050818103600083015261381c816137e0565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061387f6025836128a3565b915061388a82613823565b604082019050919050565b600060208201905081810360008301526138ae81613872565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139116024836128a3565b915061391c826138b5565b604082019050919050565b6000602082019050818103600083015261394081613904565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139818261294a565b915061398c8361294a565b92508282039050818111156139a4576139a3613947565b5b92915050565b60006139b58261294a565b91506139c08361294a565b92508282019050808211156139d8576139d7613947565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a146020836128a3565b9150613a1f826139de565b602082019050919050565b60006020820190508181036000830152613a4381613a07565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613a806019836128a3565b9150613a8b82613a4a565b602082019050919050565b60006020820190508181036000830152613aaf81613a73565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613b126032836128a3565b9150613b1d82613ab6565b604082019050919050565b60006020820190508181036000830152613b4181613b05565b9050919050565b6000613b538261294a565b9150613b5e8361294a565b9250828202613b6c8161294a565b91508282048414831517613b8357613b82613947565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613bc48261294a565b915060008203613bd757613bd6613947565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613c186020836128a3565b9150613c2382613be2565b602082019050919050565b60006020820190508181036000830152613c4781613c0b565b9050919050565b6000613c598261294a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c8b57613c8a613947565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cd08261294a565b9150613cdb8361294a565b925082613ceb57613cea613c96565b5b828204905092915050565b6000613d018261294a565b9150613d0c8361294a565b925082613d1c57613d1b613c96565b5b828206905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d4c565b613d938683613d4c565b95508019841693508086168417925050509392505050565b6000613dc6613dc1613dbc8461294a565b613180565b61294a565b9050919050565b6000819050919050565b613de083613dab565b613df4613dec82613dcd565b848454613d59565b825550505050565b600090565b613e09613dfc565b613e14818484613dd7565b505050565b5b81811015613e3857613e2d600082613e01565b600181019050613e1a565b5050565b601f821115613e7d57613e4e81613d27565b613e5784613d3c565b81016020851015613e66578190505b613e7a613e7285613d3c565b830182613e19565b50505b505050565b600082821c905092915050565b6000613ea060001984600802613e82565b1980831691505092915050565b6000613eb98383613e8f565b9150826002028217905092915050565b613ed282612898565b67ffffffffffffffff811115613eeb57613eea612a7f565b5b613ef58254612f4b565b613f00828285613e3c565b600060209050601f831160018114613f335760008415613f21578287015190505b613f2b8582613ead565b865550613f93565b601f198416613f4186613d27565b60005b82811015613f6957848901518255600182019150602085019450602081019050613f44565b86831015613f865784890151613f82601f891682613e8f565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000613fb7826135b9565b613fc18185613f9b565b9350613fd18185602086016128b4565b613fda816128de565b840191505092915050565b6000608082019050613ffa60008301876129df565b61400760208301866129df565b6140146040830185612cc8565b81810360608301526140268184613fac565b905095945050505050565b60008151905061404081612809565b92915050565b60006020828403121561405c5761405b6127d3565b5b600061406a84828501614031565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006140a96020836128a3565b91506140b482614073565b602082019050919050565b600060208201905081810360008301526140d88161409c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614115601c836128a3565b9150614120826140df565b602082019050919050565b6000602082019050818103600083015261414481614108565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220c22040f6a3316004cef6b84308f977dbd9f2f95074bb960b6e7aec5bd1a5d49e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80635948ab63116100f9578063a144819411610097578063c87b56dd11610071578063c87b56dd146104a4578063da742228146104d4578063e985e9c5146104f0578063f2fde38b14610520576101a9565b8063a144819414610450578063a22cb4651461046c578063b88d4fde14610488576101a9565b8063715018a6116100d3578063715018a6146103ec5780637da0a877146103f65780638da5cb5b1461041457806395d89b4114610432576101a9565b80635948ab63146103705780636352211e1461038c57806370a08231146103bc576101a9565b806323b872dd1161016657806342842e0e1161014057806342842e0e146102ea57806342966c6814610306578063486ff0cd14610322578063572b6c0514610340576101a9565b806323b872dd146102825780633a98cc971461029e57806342692c0f146102ba576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c5780631c2d0e71146102485780632121dc7514610264575b600080fd5b6101c860048036038101906101c39190612835565b61053c565b6040516101d5919061287d565b60405180910390f35b6101e661061e565b6040516101f39190612928565b60405180910390f35b61021660048036038101906102119190612980565b6106b0565b60405161022391906129ee565b60405180910390f35b61024660048036038101906102419190612a35565b6106f6565b005b610262600480360381019061025d9190612baa565b61080d565b005b61026c6109d9565b604051610279919061287d565b60405180910390f35b61029c60048036038101906102979190612c35565b6109f0565b005b6102b860048036038101906102b39190612c88565b610a50565b005b6102d460048036038101906102cf9190612980565b610aad565b6040516102e19190612cd7565b60405180910390f35b61030460048036038101906102ff9190612c35565b610aca565b005b610320600480360381019061031b9190612980565b610aea565b005b61032a610b46565b6040516103379190612928565b60405180910390f35b61035a60048036038101906103559190612cf2565b610b7f565b604051610367919061287d565b60405180910390f35b61038a60048036038101906103859190612d4b565b610bd9565b005b6103a660048036038101906103a19190612980565b610bfe565b6040516103b391906129ee565b60405180910390f35b6103d660048036038101906103d19190612cf2565b610caf565b6040516103e39190612cd7565b60405180910390f35b6103f4610d66565b005b6103fe610db2565b60405161040b91906129ee565b60405180910390f35b61041c610ddc565b60405161042991906129ee565b60405180910390f35b61043a610e06565b6040516104479190612928565b60405180910390f35b61046a60048036038101906104659190612a35565b610e98565b005b61048660048036038101906104819190612d78565b610f70565b005b6104a2600480360381019061049d9190612e59565b610f86565b005b6104be60048036038101906104b99190612980565b610fe8565b6040516104cb9190612928565b60405180910390f35b6104ee60048036038101906104e99190612cf2565b6110c7565b005b61050a60048036038101906105059190612edc565b611112565b604051610517919061287d565b60405180910390f35b61053a60048036038101906105359190612cf2565b6111a6565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061060757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610617575061061682611229565b5b9050919050565b60606065805461062d90612f4b565b80601f016020809104026020016040519081016040528092919081815260200182805461065990612f4b565b80156106a65780601f1061067b576101008083540402835291602001916106a6565b820191906000526020600020905b81548152906001019060200180831161068957829003601f168201915b5050505050905090565b60006106bb82611293565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070182610bfe565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890612fee565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107906112de565b73ffffffffffffffffffffffffffffffffffffffff1614806107bf57506107be816107b96112de565b611112565b5b6107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590613080565b60405180910390fd5b61080883836112ed565b505050565b60008060019054906101000a900460ff1615905080801561083e5750600160008054906101000a900460ff1660ff16105b8061086b575061084d306113a6565b15801561086a5750600160008054906101000a900460ff1660ff16145b5b6108aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a190613112565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156108e7576001600060016101000a81548160ff0219169083151502179055505b6000845114806108f8575060008351145b1561093c5783836040517ff61e67e3000000000000000000000000000000000000000000000000000000008152600401610933929190613132565b60405180910390fd5b61094684846113c9565b61094e611426565b610956611477565b61095f826114d0565b600060fe60006101000a81548160ff02191690831515021790555080156109d35760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516109ca91906131bb565b60405180910390a15b50505050565b600060fe60009054906101000a900460ff16905090565b610a016109fb6112de565b82611514565b610a40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3790613248565b60405180910390fd5b610a4b8383836115a9565b505050565b610a5861180f565b8060fd6000848152602001908152602001600020819055507f12daf683bab6ba1acaabadac5b80bbae1133812320be73dc4f62f0c0c8b1a0a28282604051610aa1929190613268565b60405180910390a15050565b600060fd6000838152602001908152602001600020549050919050565b610ae583838360405180602001604052806000815250610f86565b505050565b610afb610af56112de565b82611514565b610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613248565b60405180910390fd5b610b438161188d565b50565b6040518060400160405280600581526020017f322e322e3500000000000000000000000000000000000000000000000000000081525081565b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610be161180f565b8060fe60006101000a81548160ff02191690831515021790555050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ca6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9d906132dd565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d169061336f565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d6e61180f565b610d76610ddc565b6040517f78051f4d000000000000000000000000000000000000000000000000000000008152600401610da991906129ee565b60405180910390fd5b600060fb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060668054610e1590612f4b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4190612f4b565b8015610e8e5780601f10610e6357610100808354040283529160200191610e8e565b820191906000526020600020905b815481529060010190602001808311610e7157829003601f168201915b5050505050905090565b610ea061180f565b6000610eab83610caf565b14610ef657610eb86112de565b826040517f11c434ba000000000000000000000000000000000000000000000000000000008152600401610eed92919061338f565b60405180910390fd5b6000610f0260fc6119aa565b9050610f0e83826119b8565b8160fd600083815260200190815260200160002081905550610f3060fc6119d6565b7f2d03118aa776f7008445f6ca8490a6782ede2db364d741513555ba656ab1879f818484604051610f63939291906133b8565b60405180910390a1505050565b610f82610f7b6112de565b83836119ec565b5050565b610f97610f916112de565b83611514565b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90613248565b60405180910390fd5b610fe284848484611b58565b50505050565b6060610ff382611293565b6000610ffd61061e565b60405160200161100d919061342b565b60405160208183030381529060405290506000611028611bb4565b6110493073ffffffffffffffffffffffffffffffffffffffff166014611bf1565b61105286611e2d565b604051602001611064939291906134da565b604051602081830303815290604052905061109f828260405160200161108b92919061364c565b604051602081830303815290604052611f8d565b6040516020016110af91906136dd565b60405160208183030381529060405292505050919050565b6110cf61180f565b6110d8816114d0565b7fa4388ecc389b1390354ae0c65a856c0d7dd4fb648419f5d3ac0b99e38f46fd118160405161110791906129ee565b60405180910390a150565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6111ae61180f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490613771565b60405180910390fd5b611226816120f0565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61129c816121b6565b6112db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d2906132dd565b60405180910390fd5b50565b60006112e8612222565b905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661136083610bfe565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f90613803565b60405180910390fd5b6114228282612259565b5050565b600060019054906101000a900460ff16611475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146c90613803565b60405180910390fd5b565b600060019054906101000a900460ff166114c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bd90613803565b60405180910390fd5b6114ce6122cc565b565b8060fb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008061152083610bfe565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061156257506115618185611112565b5b806115a057508373ffffffffffffffffffffffffffffffffffffffff16611588846106b0565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166115c982610bfe565b73ffffffffffffffffffffffffffffffffffffffff161461161f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161690613895565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590613927565b60405180910390fd5b61169983838361232d565b6116a46000826112ed565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116f49190613976565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461174b91906139aa565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461180a838383612404565b505050565b6118176112de565b73ffffffffffffffffffffffffffffffffffffffff16611835610ddc565b73ffffffffffffffffffffffffffffffffffffffff161461188b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188290613a2a565b60405180910390fd5b565b600061189882610bfe565b90506118a68160008461232d565b6118b16000836112ed565b6001606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119019190613976565b925050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46119a681600084612404565b5050565b600081600001549050919050565b6119d2828260405180602001604052806000815250612409565b5050565b6001816000016000828254019250508190555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5190613a96565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b4b919061287d565b60405180910390a3505050565b611b638484846115a9565b611b6f84848484612464565b611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba590613b28565b60405180910390fd5b50505050565b60606040518060400160405280601a81526020017f68747470733a2f2f636c7562686f7573652e636f6d2f6e66742f000000000000815250905090565b606060006002836002611c049190613b48565b611c0e91906139aa565b67ffffffffffffffff811115611c2757611c26612a7f565b5b6040519080825280601f01601f191660200182016040528015611c595781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611c9157611c90613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611cf557611cf4613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611d359190613b48565b611d3f91906139aa565b90505b6001811115611ddf577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611d8157611d80613b8a565b5b1a60f81b828281518110611d9857611d97613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611dd890613bb9565b9050611d42565b5060008414611e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1a90613c2e565b60405180910390fd5b8091505092915050565b606060008203611e74576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f88565b600082905060005b60008214611ea6578080611e8f90613c4e565b915050600a82611e9f9190613cc5565b9150611e7c565b60008167ffffffffffffffff811115611ec257611ec1612a7f565b5b6040519080825280601f01601f191660200182016040528015611ef45781602001600182028036833780820191505090505b5090505b60008514611f8157600182611f0d9190613976565b9150600a85611f1c9190613cf6565b6030611f2891906139aa565b60f81b818381518110611f3e57611f3d613b8a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f7a9190613cc5565b9450611ef8565b8093505050505b919050565b60606000825103611faf576040518060200160405280600081525090506120eb565b600060405180606001604052806040815260200161414c6040913990506000600360028551611fde91906139aa565b611fe89190613cc5565b6004611ff49190613b48565b67ffffffffffffffff81111561200d5761200c612a7f565b5b6040519080825280601f01601f19166020018201604052801561203f5781602001600182028036833780820191505090505b509050600182016020820185865187015b808210156120ab576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050612050565b50506003865106600181146120c757600281146120da576120e2565b603d6001830353603d60028303536120e2565b603d60018303535b50505080925050505b919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000601460003690501015801561223e575061223d33610b7f565b5b1561225257601436033560601c9050612256565b3390505b90565b600060019054906101000a900460ff166122a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229f90613803565b60405180910390fd5b81606590816122b79190613ec9565b5080606690816122c79190613ec9565b505050565b600060019054906101000a900460ff1661231b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231290613803565b60405180910390fd5b61232b6123266112de565b6120f0565b565b60fe60009054906101000a900460ff161580156123775750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b80156123b05750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156123f45782826040517f57c167f80000000000000000000000000000000000000000000000000000000081526004016123eb92919061338f565b60405180910390fd5b6123ff8383836125eb565b505050565b505050565b61241383836125f0565b6124206000848484612464565b61245f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245690613b28565b60405180910390fd5b505050565b60006124858473ffffffffffffffffffffffffffffffffffffffff166113a6565b156125de578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026124ae6112de565b8786866040518563ffffffff1660e01b81526004016124d09493929190613fe5565b6020604051808303816000875af192505050801561250c57506040513d601f19601f820116820180604052508101906125099190614046565b60015b61258e573d806000811461253c576040519150601f19603f3d011682016040523d82523d6000602084013e612541565b606091505b506000815103612586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257d90613b28565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506125e3565b600190505b949350505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361265f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612656906140bf565b60405180910390fd5b612668816121b6565b156126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f9061412b565b60405180910390fd5b6126b46000838361232d565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461270491906139aa565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46127c560008383612404565b5050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612812816127dd565b811461281d57600080fd5b50565b60008135905061282f81612809565b92915050565b60006020828403121561284b5761284a6127d3565b5b600061285984828501612820565b91505092915050565b60008115159050919050565b61287781612862565b82525050565b6000602082019050612892600083018461286e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128d25780820151818401526020810190506128b7565b60008484015250505050565b6000601f19601f8301169050919050565b60006128fa82612898565b61290481856128a3565b93506129148185602086016128b4565b61291d816128de565b840191505092915050565b6000602082019050818103600083015261294281846128ef565b905092915050565b6000819050919050565b61295d8161294a565b811461296857600080fd5b50565b60008135905061297a81612954565b92915050565b600060208284031215612996576129956127d3565b5b60006129a48482850161296b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006129d8826129ad565b9050919050565b6129e8816129cd565b82525050565b6000602082019050612a0360008301846129df565b92915050565b612a12816129cd565b8114612a1d57600080fd5b50565b600081359050612a2f81612a09565b92915050565b60008060408385031215612a4c57612a4b6127d3565b5b6000612a5a85828601612a20565b9250506020612a6b8582860161296b565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ab7826128de565b810181811067ffffffffffffffff82111715612ad657612ad5612a7f565b5b80604052505050565b6000612ae96127c9565b9050612af58282612aae565b919050565b600067ffffffffffffffff821115612b1557612b14612a7f565b5b612b1e826128de565b9050602081019050919050565b82818337600083830152505050565b6000612b4d612b4884612afa565b612adf565b905082815260208101848484011115612b6957612b68612a7a565b5b612b74848285612b2b565b509392505050565b600082601f830112612b9157612b90612a75565b5b8135612ba1848260208601612b3a565b91505092915050565b600080600060608486031215612bc357612bc26127d3565b5b600084013567ffffffffffffffff811115612be157612be06127d8565b5b612bed86828701612b7c565b935050602084013567ffffffffffffffff811115612c0e57612c0d6127d8565b5b612c1a86828701612b7c565b9250506040612c2b86828701612a20565b9150509250925092565b600080600060608486031215612c4e57612c4d6127d3565b5b6000612c5c86828701612a20565b9350506020612c6d86828701612a20565b9250506040612c7e8682870161296b565b9150509250925092565b60008060408385031215612c9f57612c9e6127d3565b5b6000612cad8582860161296b565b9250506020612cbe8582860161296b565b9150509250929050565b612cd18161294a565b82525050565b6000602082019050612cec6000830184612cc8565b92915050565b600060208284031215612d0857612d076127d3565b5b6000612d1684828501612a20565b91505092915050565b612d2881612862565b8114612d3357600080fd5b50565b600081359050612d4581612d1f565b92915050565b600060208284031215612d6157612d606127d3565b5b6000612d6f84828501612d36565b91505092915050565b60008060408385031215612d8f57612d8e6127d3565b5b6000612d9d85828601612a20565b9250506020612dae85828601612d36565b9150509250929050565b600067ffffffffffffffff821115612dd357612dd2612a7f565b5b612ddc826128de565b9050602081019050919050565b6000612dfc612df784612db8565b612adf565b905082815260208101848484011115612e1857612e17612a7a565b5b612e23848285612b2b565b509392505050565b600082601f830112612e4057612e3f612a75565b5b8135612e50848260208601612de9565b91505092915050565b60008060008060808587031215612e7357612e726127d3565b5b6000612e8187828801612a20565b9450506020612e9287828801612a20565b9350506040612ea38782880161296b565b925050606085013567ffffffffffffffff811115612ec457612ec36127d8565b5b612ed087828801612e2b565b91505092959194509250565b60008060408385031215612ef357612ef26127d3565b5b6000612f0185828601612a20565b9250506020612f1285828601612a20565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612f6357607f821691505b602082108103612f7657612f75612f1c565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fd86021836128a3565b9150612fe382612f7c565b604082019050919050565b6000602082019050818103600083015261300781612fcb565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061306a603e836128a3565b91506130758261300e565b604082019050919050565b600060208201905081810360008301526130998161305d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006130fc602e836128a3565b9150613107826130a0565b604082019050919050565b6000602082019050818103600083015261312b816130ef565b9050919050565b6000604082019050818103600083015261314c81856128ef565b9050818103602083015261316081846128ef565b90509392505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006131a56131a061319b84613169565b613180565b613173565b9050919050565b6131b58161318a565b82525050565b60006020820190506131d060008301846131ac565b92915050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613232602e836128a3565b915061323d826131d6565b604082019050919050565b6000602082019050818103600083015261326181613225565b9050919050565b600060408201905061327d6000830185612cc8565b61328a6020830184612cc8565b9392505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006132c76018836128a3565b91506132d282613291565b602082019050919050565b600060208201905081810360008301526132f6816132ba565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006133596029836128a3565b9150613364826132fd565b604082019050919050565b600060208201905081810360008301526133888161334c565b9050919050565b60006040820190506133a460008301856129df565b6133b160208301846129df565b9392505050565b60006060820190506133cd6000830186612cc8565b6133da60208301856129df565b6133e76040830184612cc8565b949350505050565b600081905092915050565b600061340582612898565b61340f81856133ef565b935061341f8185602086016128b4565b80840191505092915050565b600061343782846133fa565b915081905092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000600082015250565b60006134786001836133ef565b915061348382613442565b600182019050919050565b7f2e706e6700000000000000000000000000000000000000000000000000000000600082015250565b60006134c46004836133ef565b91506134cf8261348e565b600482019050919050565b60006134e682866133fa565b91506134f282856133fa565b91506134fd8261346b565b915061350982846133fa565b9150613514826134b7565b9150819050949350505050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b60006135576009836133ef565b915061356282613521565b600982019050919050565b7f222c22696d616765223a22000000000000000000000000000000000000000000600082015250565b60006135a3600b836133ef565b91506135ae8261356d565b600b82019050919050565b600081519050919050565b600081905092915050565b60006135da826135b9565b6135e481856135c4565b93506135f48185602086016128b4565b80840191505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006136366002836133ef565b915061364182613600565b600282019050919050565b60006136578261354a565b915061366382856133fa565b915061366e82613596565b915061367a82846135cf565b915061368582613629565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b60006136c7601d836133ef565b91506136d282613691565b601d82019050919050565b60006136e8826136ba565b91506136f482846133fa565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061375b6026836128a3565b9150613766826136ff565b604082019050919050565b6000602082019050818103600083015261378a8161374e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006137ed602b836128a3565b91506137f882613791565b604082019050919050565b6000602082019050818103600083015261381c816137e0565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061387f6025836128a3565b915061388a82613823565b604082019050919050565b600060208201905081810360008301526138ae81613872565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139116024836128a3565b915061391c826138b5565b604082019050919050565b6000602082019050818103600083015261394081613904565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139818261294a565b915061398c8361294a565b92508282039050818111156139a4576139a3613947565b5b92915050565b60006139b58261294a565b91506139c08361294a565b92508282019050808211156139d8576139d7613947565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613a146020836128a3565b9150613a1f826139de565b602082019050919050565b60006020820190508181036000830152613a4381613a07565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613a806019836128a3565b9150613a8b82613a4a565b602082019050919050565b60006020820190508181036000830152613aaf81613a73565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613b126032836128a3565b9150613b1d82613ab6565b604082019050919050565b60006020820190508181036000830152613b4181613b05565b9050919050565b6000613b538261294a565b9150613b5e8361294a565b9250828202613b6c8161294a565b91508282048414831517613b8357613b82613947565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613bc48261294a565b915060008203613bd757613bd6613947565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613c186020836128a3565b9150613c2382613be2565b602082019050919050565b60006020820190508181036000830152613c4781613c0b565b9050919050565b6000613c598261294a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c8b57613c8a613947565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cd08261294a565b9150613cdb8361294a565b925082613ceb57613cea613c96565b5b828204905092915050565b6000613d018261294a565b9150613d0c8361294a565b925082613d1c57613d1b613c96565b5b828206905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613d897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d4c565b613d938683613d4c565b95508019841693508086168417925050509392505050565b6000613dc6613dc1613dbc8461294a565b613180565b61294a565b9050919050565b6000819050919050565b613de083613dab565b613df4613dec82613dcd565b848454613d59565b825550505050565b600090565b613e09613dfc565b613e14818484613dd7565b505050565b5b81811015613e3857613e2d600082613e01565b600181019050613e1a565b5050565b601f821115613e7d57613e4e81613d27565b613e5784613d3c565b81016020851015613e66578190505b613e7a613e7285613d3c565b830182613e19565b50505b505050565b600082821c905092915050565b6000613ea060001984600802613e82565b1980831691505092915050565b6000613eb98383613e8f565b9150826002028217905092915050565b613ed282612898565b67ffffffffffffffff811115613eeb57613eea612a7f565b5b613ef58254612f4b565b613f00828285613e3c565b600060209050601f831160018114613f335760008415613f21578287015190505b613f2b8582613ead565b865550613f93565b601f198416613f4186613d27565b60005b82811015613f6957848901518255600182019150602085019450602081019050613f44565b86831015613f865784890151613f82601f891682613e8f565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000613fb7826135b9565b613fc18185613f9b565b9350613fd18185602086016128b4565b613fda816128de565b840191505092915050565b6000608082019050613ffa60008301876129df565b61400760208301866129df565b6140146040830185612cc8565b81810360608301526140268184613fac565b905095945050505050565b60008151905061404081612809565b92915050565b60006020828403121561405c5761405b6127d3565b5b600061406a84828501614031565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006140a96020836128a3565b91506140b482614073565b602082019050919050565b600060208201905081810360008301526140d88161409c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614115601c836128a3565b9150614120826140df565b602082019050919050565b6000602082019050818103600083015261414481614108565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220c22040f6a3316004cef6b84308f977dbd9f2f95074bb960b6e7aec5bd1a5d49e64736f6c63430008110033",
  "devdoc": {
    "errors": {
      "EmptyTokenNameOrSymbol(string,string)": [
        {
          "params": {
            "name": "user-provided token name",
            "symbol": "user-provided symbol"
          }
        }
      ],
      "MintToAddressWithToken(address,address)": [
        {
          "params": {
            "from": "minter address",
            "to": "recipient address with balance > 0"
          }
        }
      ],
      "NonTransferable(address,address)": [
        {
          "params": {
            "from": "sender address",
            "to": "recipient address"
          }
        }
      ],
      "RenounceOwnership(address)": [
        {
          "params": {
            "owner": "owner address"
          }
        }
      ]
    },
    "events": {
      "ExpiryTimestampUpdated(uint256,uint256)": {
        "params": {
          "expiryTimestamp": "new expiry timestamp for the token",
          "tokenId": "token id being updated"
        }
      },
      "TokenMinted(uint256,address,uint256)": {
        "params": {
          "expiryTimestamp": "expiry timestamp of minted token",
          "to": "token recipient",
          "tokenId": "tokenId of new token"
        }
      },
      "TrustedForwarderUpdated(address)": {
        "params": {
          "trustedForwarderAddress": "new trusted forwarder address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "EmptyTokenNameOrSymbol(string,string)": [
        {
          "notice": "Empty token name or symbol when initializing contract"
        }
      ],
      "MintToAddressWithToken(address,address)": [
        {
          "notice": "Attempt to mint token to address with balance > 0"
        }
      ],
      "NonTransferable(address,address)": [
        {
          "notice": "Attempt to transfer non-transferable token"
        }
      ],
      "RenounceOwnership(address)": [
        {
          "notice": "Renounce ownership error"
        }
      ]
    },
    "events": {
      "ExpiryTimestampUpdated(uint256,uint256)": {
        "notice": "Expiry timestamp update for a particular token"
      },
      "TokenMinted(uint256,address,uint256)": {
        "notice": "New token minted"
      },
      "TrustedForwarderUpdated(address)": {
        "notice": "Trusted forwarder addres updated for a contract instance"
      }
    },
    "kind": "user",
    "methods": {
      "getExpiryTimestamp(uint256)": {
        "notice": "Gets the expiry timestamp for a given address"
      },
      "isTransferable()": {
        "notice": "Get transferability of token"
      },
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      },
      "renounceOwnership()": {
        "notice": "Renounce ownership of contract instance. Always reverts."
      },
      "safeMint(address,uint256)": {
        "notice": "Mints an ERC-721 token to the address `to` with a subscription expiry timestsamp of `expiryTimestamp`. This function can only be called by the contract owner."
      },
      "setTransferability(bool)": {
        "notice": "Make token transferable / non-transferable"
      },
      "setTrustedForwarder(address)": {
        "notice": "Sets the trusted forwarder for meta-transactions (EIP-2771) This function can only be called by the contract owner."
      },
      "setUp(string,string,address)": {
        "notice": "Initializer for contract. Sets token name, symbol and trusted forwarder (ERC-2771)"
      },
      "tokenURI(uint256)": {
        "notice": "Generates the token URI for a particular token ID"
      },
      "updateExpiryTimestamp(uint256,uint256)": {
        "notice": "Updates the expiry timestamp for a given address. This function can only be called by the contract owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 870,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 873,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2575,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2919,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1172,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1176,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1180,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1184,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1190,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2032,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 2216,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 742,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 862,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 5985,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "252",
        "type": "t_struct(Counter)2582_storage"
      },
      {
        "astId": 5993,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "tokenIdExpiryTimestamps",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5995,
        "contract": "contracts/MembershipERC721.sol:MembershipERC721",
        "label": "transferable",
        "offset": 0,
        "slot": "254",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2582_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2581,
            "contract": "contracts/MembershipERC721.sol:MembershipERC721",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}